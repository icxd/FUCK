==16838== Memcheck, a memory error detector
==16838== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16838== Using Valgrind-3.18.1-42b08ed5bd-20211015 and LibVEX; rerun with -h for copyright info
==16838== Command: ./jvm_test
==16838== Parent PID: 16270
==16838== 
--16838-- 
--16838-- Valgrind options:
--16838--    --leak-check=full
--16838--    --show-leak-kinds=all
--16838--    --track-origins=yes
--16838--    --verbose
--16838--    --log-file=valgrind-out.txt
--16838-- Contents of /proc/version:
--16838--   Linux version 5.10.102.1-microsoft-standard-WSL2 (oe-user@oe-host) (x86_64-msft-linux-gcc (GCC) 9.3.0, GNU ld (GNU Binutils) 2.34.0.20200220) #1 SMP Wed Mar 2 00:30:59 UTC 2022
--16838-- 
--16838-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand-rdseed
--16838-- Page sizes: currently 4096, max supported 4096
--16838-- Valgrind library directory: /usr/libexec/valgrind
--16838-- Reading syms from /home/icxd/yakou/jvm/jvm_test
--16838-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
--16838--   Considering /usr/lib/debug/.build-id/15/921ea631d9f36502d20459c43e5c85b7d6ab76.debug ..
--16838--   .. build-id is valid
--16838-- Reading syms from /usr/libexec/valgrind/memcheck-amd64-linux
--16838--    object doesn't have a symbol table
--16838--    object doesn't have a dynamic symbol table
--16838-- Scheduler: using generic scheduler lock implementation.
--16838-- Reading suppressions file: /usr/libexec/valgrind/default.supp
==16838== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-16838-by-icxd-on-???
==16838== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-16838-by-icxd-on-???
==16838== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-16838-by-icxd-on-???
==16838== 
==16838== TO CONTROL THIS PROCESS USING vgdb (which you probably
==16838== don't want to do, unless you know exactly what you're doing,
==16838== or are doing some strange experiment):
==16838==   /usr/bin/vgdb --pid=16838 ...command...
==16838== 
==16838== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==16838==   /path/to/gdb ./jvm_test
==16838== and then give GDB the following command
==16838==   target remote | /usr/bin/vgdb --pid=16838
==16838== --pid is optional if only one valgrind process is running
==16838== 
--16838-- REDIR: 0x402aa40 (ld-linux-x86-64.so.2:strlen) redirected to 0x580bcec2 (???)
--16838-- REDIR: 0x402a810 (ld-linux-x86-64.so.2:index) redirected to 0x580bcedc (???)
--16838-- Reading syms from /usr/libexec/valgrind/vgpreload_core-amd64-linux.so
--16838--    object doesn't have a symbol table
--16838-- Reading syms from /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so
--16838--    object doesn't have a symbol table
==16838== WARNING: new redirection conflicts with existing -- ignoring it
--16838--     old: 0x0402aa40 (strlen              ) R-> (0000.0) 0x580bcec2 ???
--16838--     new: 0x0402aa40 (strlen              ) R-> (2007.0) 0x0484ee30 strlen
--16838-- REDIR: 0x4027220 (ld-linux-x86-64.so.2:strcmp) redirected to 0x484fcd0 (strcmp)
--16838-- REDIR: 0x402afa0 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4853840 (mempcpy)
--16838-- Reading syms from /usr/lib/x86_64-linux-gnu/libc.so.6
--16838--   Considering /usr/lib/debug/.build-id/c2/89da5071a3399de893d2af81d6a30c62646e1e.debug ..
--16838--   .. build-id is valid
==16838== WARNING: new redirection conflicts with existing -- ignoring it
--16838--     old: 0x0490bc60 (memalign            ) R-> (1011.0) 0x0484e080 memalign
--16838--     new: 0x0490bc60 (memalign            ) R-> (1017.0) 0x0484e050 aligned_alloc
==16838== WARNING: new redirection conflicts with existing -- ignoring it
--16838--     old: 0x0490bc60 (memalign            ) R-> (1011.0) 0x0484e080 memalign
--16838--     new: 0x0490bc60 (memalign            ) R-> (1017.0) 0x0484e020 aligned_alloc
==16838== WARNING: new redirection conflicts with existing -- ignoring it
--16838--     old: 0x0490bc60 (memalign            ) R-> (1011.0) 0x0484e080 memalign
--16838--     new: 0x0490bc60 (memalign            ) R-> (1017.0) 0x0484e050 aligned_alloc
==16838== WARNING: new redirection conflicts with existing -- ignoring it
--16838--     old: 0x0490bc60 (memalign            ) R-> (1011.0) 0x0484e080 memalign
--16838--     new: 0x0490bc60 (memalign            ) R-> (1017.0) 0x0484e020 aligned_alloc
--16838-- REDIR: 0x490e720 (libc.so.6:strnlen) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e9e0 (libc.so.6:strpbrk) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e2e0 (libc.so.6:strcmp) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x492ccd0 (libc.so.6:wcsnlen) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490f6d0 (libc.so.6:memset) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x492b540 (libc.so.6:wcslen) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490fc10 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x492b370 (libc.so.6:wcschr) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e260 (libc.so.6:index) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e960 (libc.so.6:rindex) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490f5a0 (libc.so.6:memmove) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
==16838== Preferring higher priority redirection:
--16838--     old: 0x04a067c0 (__memcpy_avx_unalign) R-> (2018.0) 0x04850f90 __memcpy_avx_unaligned_erms
--16838--     new: 0x04a067c0 (__memcpy_avx_unalign) R-> (2018.1) 0x04852880 memmove
--16838-- REDIR: 0x492b3f0 (libc.so.6:wcscmp) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490f9e0 (libc.so.6:stpncpy) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x492b9b0 (libc.so.6:wmemchr) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e830 (libc.so.6:strncmp) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490fa70 (libc.so.6:strcasecmp) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e420 (libc.so.6:strcspn) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x492b470 (libc.so.6:wcscpy) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e1d0 (libc.so.6:strcat) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490fb60 (libc.so.6:strncasecmp_l) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490f480 (libc.so.6:bcmp) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x4917570 (libc.so.6:memrchr) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x4911010 (libc.so.6:strchrnul) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e390 (libc.so.6:strcpy) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490fb10 (libc.so.6:strcasecmp_l) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e6a0 (libc.so.6:strlen) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490e8d0 (libc.so.6:strncpy) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490f950 (libc.so.6:stpcpy) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490f3f0 (libc.so.6:memchr) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490eb00 (libc.so.6:strspn) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490f7d0 (libc.so.6:mempcpy) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x490fac0 (libc.so.6:strncasecmp) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x4910f80 (libc.so.6:rawmemchr) redirected to 0x483f220 (_vgnU_ifunc_wrapper)
--16838-- REDIR: 0x4a03610 (libc.so.6:__strrchr_avx2) redirected to 0x484e810 (rindex)
--16838-- REDIR: 0x490b0a0 (libc.so.6:malloc) redirected to 0x4848820 (malloc)
==16838== Conditional jump or move depends on uninitialised value(s)
==16838==    at 0x109D81: main (test.c:51)
==16838==  Uninitialised value was created by a stack allocation
==16838==    at 0x109901: main (test.c:6)
==16838== 
--16838-- REDIR: 0x490b740 (libc.so.6:realloc) redirected to 0x484dc50 (realloc)
==16838== Conditional jump or move depends on uninitialised value(s)
==16838==    at 0x484DC80: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==16838==    by 0x109DB1: main (test.c:51)
==16838==  Uninitialised value was created by a stack allocation
==16838==    at 0x109901: main (test.c:6)
==16838== 
==16838== Conditional jump or move depends on uninitialised value(s)
==16838==    at 0x4848752: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==16838==    by 0x109DB1: main (test.c:51)
==16838==  Uninitialised value was created by a stack allocation
==16838==    at 0x109901: main (test.c:6)
==16838== 
==16838== Use of uninitialised value of size 8
==16838==    at 0x109DD7: main (test.c:51)
==16838==  Uninitialised value was created by a stack allocation
==16838==    at 0x109901: main (test.c:6)
==16838== 
==16838== Invalid write of size 8
==16838==    at 0x109DD7: main (test.c:51)
==16838==  Address 0x4a92260 is 0 bytes after a block of size 0 alloc'd
==16838==    at 0x48487A9: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==16838==    by 0x109DB1: main (test.c:51)
==16838== 
==16838== Invalid write of size 8
==16838==    at 0x109DDE: main (test.c:51)
==16838==  Address 0x4a92268 is 8 bytes after a block of size 0 alloc'd
==16838==    at 0x48487A9: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==16838==    by 0x109DB1: main (test.c:51)
==16838== 
==16838== Invalid write of size 8
==16838==    at 0x109DE6: main (test.c:51)
==16838==  Address 0x4a92270 is 16 bytes after a block of size 0 alloc'd
==16838==    at 0x48487A9: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==16838==    by 0x109DB1: main (test.c:51)
==16838== 
==16838== Invalid write of size 8
==16838==    at 0x109DEE: main (test.c:51)
==16838==  Address 0x4a92278 is 24 bytes after a block of size 0 in arena "client"
==16838== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 64, hi = 0.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==16838==    at 0x5804284A: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x58042977: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x58042B1B: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x5804C8CF: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x5803AE9A: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x580395B7: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x5803DF3D: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x58038868: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x1008DDE115: ???
==16838==    by 0x1008CA9F2F: ???
==16838==    by 0x581FCD83: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==16838==    by 0x1008CA9F17: ???
==16838==    by 0x1008CA9F2F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 16838)
==16838==    at 0x109DF6: main (test.c:51)
client stack range: [0x1FFEFFD000 0x1FFF000FFF] client SP: 0x1FFEFFFA40
valgrind stack range: [0x1008BAA000 0x1008CA9FFF] top usage: 18744 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

